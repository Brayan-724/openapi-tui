/*
 * OpenAPI v3.1.0 Specification
 *
 * OpenAPI inside OpenAPI
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MediaType {
    #[serde(rename = "schema", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub schema: Option<Option<serde_json::Value>>,
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<std::collections::HashMap<String, models::Encoding>>,
    #[serde(rename = "example", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub example: Option<Option<serde_json::Value>>,
    #[serde(rename = "examples", skip_serializing_if = "Option::is_none")]
    pub examples: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl MediaType {
    pub fn new() -> MediaType {
        MediaType {
            schema: None,
            encoding: None,
            example: None,
            examples: None,
        }
    }
}

