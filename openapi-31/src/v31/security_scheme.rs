/*
 * OpenAPI v3.1.0 Specification
 *
 * OpenAPI inside OpenAPI
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecurityScheme {
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<Type>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<serde_json::Value>>,
}

impl SecurityScheme {
    pub fn new(r#type: Option<Type>) -> SecurityScheme {
        SecurityScheme {
            r#type,
            description: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "apiKey")]
    ApiKey,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "mutualTLS")]
    MutualTls,
    #[serde(rename = "oauth2")]
    Oauth2,
    #[serde(rename = "openIdConnect")]
    OpenIdConnect,
}

impl Default for Type {
    fn default() -> Type {
        Self::ApiKey
    }
}

