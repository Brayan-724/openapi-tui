/*
 * OpenAPI v3.1.0 Specification
 *
 * OpenAPI inside OpenAPI
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Link {
    #[serde(rename = "operationRef", skip_serializing_if = "Option::is_none")]
    pub operation_ref: Option<String>,
    #[serde(rename = "operationId", skip_serializing_if = "Option::is_none")]
    pub operation_id: Option<String>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "requestBody", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_body: Option<Option<serde_json::Value>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<Box<models::Server>>,
}

impl Link {
    pub fn new() -> Link {
        Link {
            operation_ref: None,
            operation_id: None,
            parameters: None,
            request_body: None,
            description: None,
            body: None,
        }
    }
}

